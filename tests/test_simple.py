from pycmdparse.abstract_opt import AbstractOpt
from pycmdparse.cmdline import CmdLine
from pycmdparse.opt_acceptresult_enum import OptAcceptResultEnum
from pycmdparse.parseresult_enum import ParseResultEnum
from pycmdparse.positional_params import PositionalParams


class MyCl(CmdLine):
    # initialize parent class field with YAML that defines the functionality you want
    yaml_def = '''
    program_name: foo-utility

    summary: >
        Lorem ipsum luctus ut sollicitudin fames orci nibh quam mi at nostra libero tellus dictumst
        enim, inceptos venenatis dapibus dui eget aliquam purus nisi habitant sagittis est accumsan phasellus
        donec pellentesque at lacus.

        Fringilla erat ultricies vulputate nullam etiam mollis potenti ut aliquam, euismod vestibulum 
        diam porttitor eget integer quisque ipsum, vitae nostra purus ut bibendum pharetra aliquam placerat.
    
    # If there is no usage section, then it is generated by pycmdparse
    #usage: >
    #  foo-utility [options] FROMFILE TOFILE

    positional_params:
      params: P1 P2
      text: >
        Habitant pellentesque habitant faucibus bibendum erat sollicitudin libero etiam, in
        senectus leo metus congue ipsum elementum tellus conubia, lacus primis ultricies himenaeos
        facilisis massa varius.
        
    supported_options:
      - category: Common options
        options:
        - name    : file_name
          short   : f
          long    : filename
          hint    : pathref
          required: true
          opt     : param
          internal: false
          default :
          help: >
            Massa tristique suscipit tempus integer tincidunt a justo, conubia ornare id himenaeos
            dapibus aliquam, aptent per curabitur elit magna posuere rhoncus congue dolor velit nibh
            ut dictum est convallis.            
        - name    : verbose
          short   : v
          long    : verbose
          required: false
          opt     : bool
          internal: false
          default : false
          help: >
            Aliquet vel senectus class viverra ipsum tempus sociosqu rhoncus aenean, magna
            eros porttitor tortor eleifend ad duis congue sollicitudin, venenatis magna augue
            eu condimentum purus hendrerit nibh mattis litora ultricies aptent justo vestibulum
            suspendisse.
        - name    : big_vee
          short   : V
          long    :
          opt     : bool
          help: >
            Just an upper-case option...
        - name    : no_overwrite
          short   : n
          long    : no-overwrite
          hint    :
          required: false
          opt     : bool
          internal: false
          default :
          help: >
            Facilisis erat lobortis nibh varius curabitur cursus eros himenaeos fringilla ligula volutpat,
            quisque euismod sagittis tempus non dui luctus senectus habitasse faucibus congue eu id
            congue dolor risus.
        - name    : help
          short   : h
          long    : help
          hint    :
          required: false
          opt     : bool
          internal: false
          default :
          help: >
            Show this help
      - category: Less common options
        options:
        - name    : max_threads
          short   : m
          long    : max-threads
          hint    : n
          required: false
          datatype: int
          opt     : param
          internal: false
          default : 1
          help: >
            Fusce cras primis varius congue dolor rhoncus platea, tempor ipsum sociosqu
            rhoncus sollicitudin curabitur, molestie donec est auctor consequat quisque mollis
            suspendisse pellentesque ac phasellus nisl etiam praesent, scelerisque aliquet gravida
            pulvinar dictumst luctus bibendum accumsan, molestie pharetra curae cras cubilia aptent.
        - name      : log_mode
          short     : l
          long      : log-mode
          hint      : error, warn, info
          required  : false
          opt       : multiparam
          multi_type: at-most
          count     : 4
          internal  : false
          default   : error
          help: >
            Rutrum curabitur aliquam tincidunt ad nam egestas dui ut cubilia interdum netus
            senectus, urna imperdiet ullamcorper leo enim viverra conubia morbi nostra eleifend
            tempor blandit faucibus quis phasellus consequat dolor blandit condimentum velit
            torquent duis.
        - name      : multi_verse
          short     : m
          long      : multi
          hint      : A, B, C ...
          required  : false
          datatype  : date
          opt       : multiparam
          multi_type: at-most
          count     : 5
          internal  : false
          default   : error
          help: >
            Habitasse sollicitudin congue cursus quisque rhoncus sed integer interdum ad
            ante, fringilla himenaeos vel turpis venenatis vulputate nunc luctus sociosqu
            ipsum viverra placerat vivamus eleifend porta mi cursus per at sodales ante proin,
            suscipit lacinia molestie eget libero aenean quisque proin lacus metus.

    details: >
      Fusce cras primis varius congue dolor rhoncus platea, tempor ipsum sociosqu rhoncus sollicitudin
      curabitur, molestie donec est auctor consequat quisque mollis suspendisse pellentesque ac phasellus
      nisl etiam praesent, scelerisque aliquet gravida pulvinar dictumst luctus bibendum accumsan, molestie
      pharetra curae cras cubilia aptent.

      Donec quisque est cursus sollicitudin massa interdum auctor dapibus, quam cras cubilia ut in vel tortor
      ultrices in, nisl sodales cursus augue quis odio lobortis.\n

      ting     tang       walla walla bing bang\n
      -------  ---------  ---------------------\n
      1        who        green\n
      2        what       eggs\n
      3        where      and\n
      4        why        ham\n
      5        when       that Sam I Am

    examples:
      - example: foo-utility --f /var/lib/myfile --verbose --log-level=warn
        explanation: >
          Etiam pulvinar ullamcorper sagittis enim gravida arcu justo, commodo malesuada
          sociosqu adipiscing etiam ac consectetur libero, blandit quam volutpat
          pellentesque bibendum nullam

      - example: foo-utility --f ~/zfile.gz -m 100 --log-level=error
        explanation: >
          Magna felis sed ipsum duis sem tempus posuere rhoncus gravida pretium,
          etiam vitae elementum donec ultricies sed donec mauris ut.

    addendum: >
      Version 1.2.3, Copyright (c) The Author 2019\n

      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this utility except in compliance with the License.
      You may obtain a copy of the License at:

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.\n

      Github: https://github.com/theauthor/foo-utility
    '''

    @classmethod
    def my_validator(cls, to_validate):
        if isinstance(to_validate, PositionalParams):
            if len(to_validate.params) != 2:
                return OptAcceptResultEnum.ERROR, "Incorrect number of positional params. Must provide P1 and P2"
        elif isinstance(to_validate, AbstractOpt):
            if to_validate.opt_name == "file_name":
                if to_validate.value == "FOO":
                    return OptAcceptResultEnum.ERROR, "Don't specify FOO as the filename"
        return None,

    # parent class will call this validator - if defined - to validate each arg (one at a time)
    # as well as the list of positional params (all together) that were parsed
    validator = my_validator

    file_name = None
    verbose = None
    multi_verse = None
    max_threads = None
    no_overwrite = None
    big_vee = None


class IGNORETestCase:
    def test_simple(self):
        args = "-f /some/file --verbose -V --multi 2019-12-31 01-01-2019 2.2.2019 --max-threads 123 -- POS1 POS2"
        parse_result = MyCl.parse(args)
        if parse_result.value != ParseResultEnum.SUCCESS.value:  # not sure why .value is required...
            MyCl.display_info(parse_result)
            exit(1)

        print("file_name             = {}".format(MyCl.file_name))
        print("verbose               = {}".format(MyCl.verbose))
        print("big_vee               = {}".format(MyCl.big_vee))
        print("no_overwrite          = {}".format(MyCl.no_overwrite))
        print("multi_verse           = {}".format(MyCl.multi_verse))
        print("max_threads           = {}".format(MyCl.max_threads))
        print("file_name initialized = {}".format(MyCl.get_option("file_name").initialized))
        print("positional params     = {}".format(MyCl.positional_params.params))
